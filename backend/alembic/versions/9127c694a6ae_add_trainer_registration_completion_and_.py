"""Add trainer registration completion and time-based booking fields

Revision ID: 9127c694a6ae
Revises: 3848ce760e30
Create Date: 2025-10-07 19:04:08.465855

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '9127c694a6ae'
down_revision = '3848ce760e30'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('booking_requests', sa.Column('start_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('booking_requests', sa.Column('end_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('booking_requests', sa.Column('training_type', sa.String(length=100), nullable=True))
    op.add_column('booking_requests', sa.Column('price_per_hour', sa.Float(), nullable=True))
    op.add_column('booking_requests', sa.Column('total_cost', sa.Float(), nullable=True))
    op.add_column('booking_requests', sa.Column('location_type', sa.Enum('GYM', 'HOME', 'ONLINE', name='locationtype'), nullable=True))
    op.add_column('booking_requests', sa.Column('location_address', sa.Text(), nullable=True))
    op.alter_column('booking_requests', 'created_at',
               existing_type=mysql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('booking_requests', 'updated_at',
               existing_type=mysql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    op.create_index(op.f('ix_booking_requests_id'), 'booking_requests', ['id'], unique=False)
    op.add_column('bookings', sa.Column('start_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('bookings', sa.Column('end_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('bookings', sa.Column('training_type', sa.String(length=100), nullable=True))
    op.add_column('bookings', sa.Column('price_per_hour', sa.Float(), nullable=True))
    op.add_column('bookings', sa.Column('total_cost', sa.Float(), nullable=True))
    op.add_column('bookings', sa.Column('location_type', sa.Enum('GYM', 'HOME', 'ONLINE', name='locationtype'), nullable=True))
    op.add_column('bookings', sa.Column('location_address', sa.Text(), nullable=True))
    # Drop foreign key constraints first
    op.drop_constraint('time_slots_ibfk_1', 'time_slots', type_='foreignkey')
    op.drop_constraint('time_slots_ibfk_2', 'time_slots', type_='foreignkey')
    
    # Then drop indexes
    op.drop_index('idx_available', table_name='time_slots')
    op.drop_index('idx_start_time', table_name='time_slots')
    op.drop_index('idx_trainer_date', table_name='time_slots')
    
    # Alter column types
    op.alter_column('time_slots', 'created_at',
               existing_type=mysql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('time_slots', 'updated_at',
               existing_type=mysql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    
    # Create new index
    op.create_index(op.f('ix_time_slots_id'), 'time_slots', ['id'], unique=False)
    
    # Recreate foreign key constraints
    op.create_foreign_key(None, 'time_slots', 'trainers', ['trainer_id'], ['id'])
    op.create_foreign_key(None, 'time_slots', 'bookings', ['booking_id'], ['id'])
    op.add_column('trainers', sa.Column('price_per_hour', sa.Float(), nullable=False))
    op.add_column('trainers', sa.Column('training_types', sa.Text(), nullable=True))
    op.add_column('trainers', sa.Column('gym_name', sa.String(length=255), nullable=True))
    op.add_column('trainers', sa.Column('gym_address', sa.Text(), nullable=True))
    op.add_column('trainers', sa.Column('gym_city', sa.String(length=100), nullable=True))
    op.add_column('trainers', sa.Column('gym_state', sa.String(length=50), nullable=True))
    op.add_column('trainers', sa.Column('gym_zip_code', sa.String(length=20), nullable=True))
    op.add_column('trainers', sa.Column('gym_phone', sa.String(length=20), nullable=True))
    op.add_column('trainers', sa.Column('profile_completion_status', sa.Enum('INCOMPLETE', 'COMPLETE', name='profilecompletionstatus'), nullable=True))
    op.add_column('trainers', sa.Column('profile_completion_date', sa.DateTime(timezone=True), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('trainers', 'profile_completion_date')
    op.drop_column('trainers', 'profile_completion_status')
    op.drop_column('trainers', 'gym_phone')
    op.drop_column('trainers', 'gym_zip_code')
    op.drop_column('trainers', 'gym_state')
    op.drop_column('trainers', 'gym_city')
    op.drop_column('trainers', 'gym_address')
    op.drop_column('trainers', 'gym_name')
    op.drop_column('trainers', 'training_types')
    op.drop_column('trainers', 'price_per_hour')
    op.drop_constraint(None, 'time_slots', type_='foreignkey')
    op.drop_constraint(None, 'time_slots', type_='foreignkey')
    op.create_foreign_key('time_slots_ibfk_2', 'time_slots', 'bookings', ['booking_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key('time_slots_ibfk_1', 'time_slots', 'trainers', ['trainer_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_time_slots_id'), table_name='time_slots')
    op.create_index('idx_trainer_date', 'time_slots', ['trainer_id', 'date'], unique=False)
    op.create_index('idx_start_time', 'time_slots', ['start_time'], unique=False)
    op.create_index('idx_available', 'time_slots', ['is_available', 'is_booked'], unique=False)
    op.alter_column('time_slots', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=mysql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    op.alter_column('time_slots', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=mysql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('bookings', 'location_address')
    op.drop_column('bookings', 'location_type')
    op.drop_column('bookings', 'total_cost')
    op.drop_column('bookings', 'price_per_hour')
    op.drop_column('bookings', 'training_type')
    op.drop_column('bookings', 'end_time')
    op.drop_column('bookings', 'start_time')
    op.drop_index(op.f('ix_booking_requests_id'), table_name='booking_requests')
    op.alter_column('booking_requests', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=mysql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'))
    op.alter_column('booking_requests', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=mysql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('booking_requests', 'location_address')
    op.drop_column('booking_requests', 'location_type')
    op.drop_column('booking_requests', 'total_cost')
    op.drop_column('booking_requests', 'price_per_hour')
    op.drop_column('booking_requests', 'training_type')
    op.drop_column('booking_requests', 'end_time')
    op.drop_column('booking_requests', 'start_time')
    # ### end Alembic commands ###











